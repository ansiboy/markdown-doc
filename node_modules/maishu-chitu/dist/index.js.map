{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./out/Application.js","webpack:///./out/Errors.js","webpack:///./out/Page.js","webpack:///./out/PageMaster.js","webpack:///./out/index.js","webpack:///external \"maishu-chitu-service\""],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,8DAAc,EAAE,sDAAU,CAAC,mCAAE;AACnF;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI,GAAG,MAAM,qBAAqB,IAAI,GAAG,MAAM;AAC/F;AACA,kBAAkB,KAAK,EAAE,WAAW;AACpC;AACA;AACA;AACA;AACA,oDAAoD,yBAAyB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACnKF,iGAAO,CAAC,mBAAS,EAAE,OAAS,CAAC,mCAAE;AAC/B;AACA,kDAAkD,cAAc;AAChE;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA,oCAAoC,UAAU,iBAAiB,aAAa;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,MAAM;AAClG;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA,sCAAsC,KAAK;AAC3C;AACA;AACA;AACA,sDAAsD,IAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI;AACpD;AACA;AACA;AACA,yDAAyD,YAAY,iBAAiB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,SAAS;AAC/C;AACA;AACA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA,oDAAoD,SAAS;AAC7D;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa,wCAAwC,SAAS;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC7GF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,sDAAU,EAAE,gEAAe,CAAC,mCAAE;AACpF;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC9GF;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,uEAAsB,EAAE,kDAAQ,EAAE,gEAAe,EAAE,sDAAU,CAAC,mCAAE;AAC9F;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,kDAAkD,SAAS;AAC3D,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,cAAc,GAAG,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0CAA0C;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,GAAG,uBAAuB,GAAG;AAC/E;AACA;AACA;AACA,8BAA8B,EAAE;AAChC;AACA;AACA;AACA,KAAK;AACL,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC7RF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,gEAAe,EAAE,8DAAc,EAAE,kDAAQ,EAAE,uEAAsB,CAAC,mCAAE;AAClG;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACZF,kE","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"maishu-chitu-service\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"maishu-chitu-service\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"maishu-chitu-service\")) : factory(root[\"maishu-chitu-service\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof window === 'undefined' ? global : window, function(__WEBPACK_EXTERNAL_MODULE_maishu_chitu_service__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./out/index.js\");\n","define([\"require\", \"exports\", \"maishu-chitu-service\", \"./PageMaster\", \"./Errors\"], function (require, exports, maishu_chitu_service_1, PageMaster_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    const DefaultPageName = \"index\";\r\n    function parseUrl(url) {\r\n        if (!url)\r\n            throw Errors_1.Errors.argumentNull('url');\r\n        let sharpIndex = url.indexOf('#');\r\n        let routeString;\r\n        if (sharpIndex >= 0)\r\n            routeString = url.substr(sharpIndex + 1);\r\n        else\r\n            routeString = url;\r\n        if (!routeString)\r\n            throw Errors_1.Errors.canntParseRouteString(url);\r\n        if (routeString.startsWith('!')) {\r\n            throw Errors_1.Errors.canntParseRouteString(routeString);\r\n        }\r\n        let routePath;\r\n        let search = null;\r\n        let param_spliter_index = routeString.indexOf('?');\r\n        if (param_spliter_index >= 0) {\r\n            search = routeString.substr(param_spliter_index + 1);\r\n            routePath = routeString.substring(0, param_spliter_index);\r\n        }\r\n        else {\r\n            routePath = routeString;\r\n        }\r\n        if (!routePath)\r\n            routePath = DefaultPageName;\r\n        let values = {};\r\n        if (search) {\r\n            values = pareeUrlQuery(search);\r\n        }\r\n        let pageName = routePath;\r\n        return { pageName, values };\r\n    }\r\n    exports.parseUrl = parseUrl;\r\n    function pareeUrlQuery(query) {\r\n        let match, pl = /\\+/g, search = /([^&=]+)=?([^&]*)/g, decode = function (s) {\r\n            return decodeURIComponent(s.replace(pl, \" \"));\r\n        };\r\n        let urlParams = {};\r\n        while (match = search.exec(query))\r\n            urlParams[decode(match[1])] = decode(match[2]);\r\n        return urlParams;\r\n    }\r\n    function createPageUrl(pageName, params) {\r\n        let path_parts = pageName.split('.');\r\n        let path = path_parts.join('/');\r\n        if (!params)\r\n            return `${path}`;\r\n        let paramsText = '';\r\n        for (let key in params) {\r\n            let value = params[key];\r\n            if (typeof value == \"function\" || value == null)\r\n                continue;\r\n            value = encodeURIComponent(value);\r\n            paramsText = paramsText == '' ? `?${key}=${value}` : paramsText + `&${key}=${value}`;\r\n        }\r\n        return `${path}${paramsText}`;\r\n    }\r\n    exports.createPageUrl = createPageUrl;\r\n    class Application extends PageMaster_1.PageMaster {\r\n        constructor(args) {\r\n            super(Application.containers((args || {}).container), (args || {}).parser);\r\n            this._runned = false;\r\n        }\r\n        static containers(container) {\r\n            let r = {};\r\n            if (container == null) {\r\n                r[Application.DefaultContainerName] = document.body;\r\n                return r;\r\n            }\r\n            if (container.tagName) {\r\n                r[Application.DefaultContainerName] = container;\r\n                return r;\r\n            }\r\n            r = container;\r\n            if (!Application.DefaultContainerName)\r\n                throw Errors_1.Errors.containerIsNotExists(Application.DefaultContainerName);\r\n            return r;\r\n        }\r\n        parseUrl(url) {\r\n            if (!url)\r\n                throw Errors_1.Errors.argumentNull('url');\r\n            let routeData = parseUrl(url);\r\n            return routeData;\r\n        }\r\n        createUrl(pageName, values) {\r\n            return createPageUrl(pageName, values);\r\n        }\r\n        run() {\r\n            if (this._runned)\r\n                return;\r\n            let showPage = () => {\r\n                let url = location.href;\r\n                let sharpIndex = url.indexOf('#');\r\n                if (sharpIndex < 0) {\r\n                    url = '#' + DefaultPageName;\r\n                }\r\n                else {\r\n                    url = url.substr(sharpIndex + 1);\r\n                }\r\n                if (url.startsWith('!')) {\r\n                    return;\r\n                }\r\n                this.showPage(url);\r\n            };\r\n            showPage();\r\n            window.addEventListener('hashchange', () => {\r\n                if (this.location.skip) {\r\n                    delete this.location.skip;\r\n                    return;\r\n                }\r\n                showPage();\r\n            });\r\n            this._runned = true;\r\n        }\r\n        setLocationHash(pageUrl) {\r\n            this.location.hash = `#${pageUrl}`;\r\n            this.location.skip = true;\r\n        }\r\n        get location() {\r\n            return location;\r\n        }\r\n        redirect(pageUrl, args) {\r\n            if (!pageUrl)\r\n                throw Errors_1.Errors.argumentNull('pageUrl');\r\n            let page = this.showPage(pageUrl, args);\r\n            let url = this.createUrl(page.name, page.data);\r\n            this.setLocationHash(url);\r\n            return page;\r\n        }\r\n        forward(pageUrl, args, setUrl) {\r\n            if (!pageUrl)\r\n                throw Errors_1.Errors.argumentNull('pageNameOrUrl');\r\n            if (setUrl == null)\r\n                setUrl = true;\r\n            let page = this.showPage(pageUrl, args, true);\r\n            if (setUrl) {\r\n                let url = this.createUrl(page.name, page.data);\r\n                this.setLocationHash(url);\r\n            }\r\n            return page;\r\n        }\r\n        back() {\r\n            this.closeCurrentPage();\r\n            setTimeout(() => {\r\n                history.back();\r\n            }, 100);\r\n        }\r\n        createService(type) {\r\n            type = type || maishu_chitu_service_1.Service;\r\n            let service = new type();\r\n            service.error.add((sender, error) => {\r\n                this.error.fire(this, error, null);\r\n            });\r\n            return service;\r\n        }\r\n    }\r\n    exports.Application = Application;\r\n    Application.DefaultContainerName = 'default';\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Errors {\r\n        static pageNodeNotExists(pageName) {\r\n            let msg = `Page node named ${pageName} is not exists.`;\r\n            return new Error(msg);\r\n        }\r\n        static actionCanntNull(pageName) {\r\n            let msg = `Action of '${pageName}' can not be null.`;\r\n            return new Error(msg);\r\n        }\r\n        static argumentNull(paramName) {\r\n            var msg = `The argument \"${paramName}\" cannt be null.`;\r\n            return new Error(msg);\r\n        }\r\n        static modelFileExpecteFunction(script) {\r\n            var msg = `The eval result of script file \"${script}\" is expected a function.`;\r\n            return new Error(msg);\r\n        }\r\n        static paramTypeError(paramName, expectedType) {\r\n            var msg = `The param \"${paramName}\" is expected \"${expectedType}\" type.`;\r\n            return new Error(msg);\r\n        }\r\n        static paramError(msg) {\r\n            return new Error(msg);\r\n        }\r\n        static pathPairRequireView(index) {\r\n            var msg = `The view value is required for path pair, but the item with index \"${index}\" is miss it.`;\r\n            return new Error(msg);\r\n        }\r\n        static notImplemented(name) {\r\n            var msg = `'The method \"${name}\" is not implemented.'`;\r\n            return new Error(msg);\r\n        }\r\n        static routeExists(name) {\r\n            var msg = `Route named \"${name}\" is exists.`;\r\n            return new Error(msg);\r\n        }\r\n        static noneRouteMatched(url) {\r\n            var msg = `None route matched with url \"${url}\".`;\r\n            var error = new Error(msg);\r\n            return error;\r\n        }\r\n        static emptyStack() {\r\n            return new Error('The stack is empty.');\r\n        }\r\n        static canntParseUrl(url) {\r\n            var msg = `Can not parse the url \"${url}\" to route data.`;\r\n            return new Error(msg);\r\n        }\r\n        static canntParseRouteString(routeString) {\r\n            var msg = `Can not parse the route string \"${routeString}\" to route data.;`;\r\n            return new Error(msg);\r\n        }\r\n        static routeDataRequireController() {\r\n            var msg = 'The route data does not contains a \"controller\" file.';\r\n            return new Error(msg);\r\n        }\r\n        static routeDataRequireAction() {\r\n            var msg = 'The route data does not contains a \"action\" file.';\r\n            return new Error(msg);\r\n        }\r\n        static viewCanntNull() {\r\n            var msg = 'The view or viewDeferred of the page cannt null.';\r\n            return new Error(msg);\r\n        }\r\n        static createPageFail(pageName) {\r\n            var msg = `Create page \"${pageName}\" fail.`;\r\n            return new Error(msg);\r\n        }\r\n        static actionTypeError(pageName) {\r\n            let msg = `The action in page '${pageName}' is expect as function.`;\r\n            return new Error(msg);\r\n        }\r\n        static canntFindAction(pageName) {\r\n            let msg = `Cannt find action in page '${pageName}', is the exports has default field?`;\r\n            return new Error(msg);\r\n        }\r\n        static exportsCanntNull(pageName) {\r\n            let msg = `Exports of page '${pageName}' is null.`;\r\n            return new Error(msg);\r\n        }\r\n        static scrollerElementNotExists() {\r\n            let msg = \"Scroller element is not exists.\";\r\n            return new Error(msg);\r\n        }\r\n        static resourceExists(resourceName, pageName) {\r\n            let msg = `Rosource '${resourceName}' is exists in the resources of page '${pageName}'.`;\r\n            return new Error(msg);\r\n        }\r\n        static siteMapRootCanntNull() {\r\n            let msg = `The site map root node can not be null.`;\r\n            return new Error(msg);\r\n        }\r\n        static duplicateSiteMapNode(name) {\r\n            let msg = `The site map node ${name} is exists.`;\r\n            return new Error(msg);\r\n        }\r\n        static unexpectedNullValue() {\r\n            let msg = `Unexpected null value.`;\r\n            return new Error(msg);\r\n        }\r\n        static containerIsNotExists(name) {\r\n            let msg = `Container '${name}' is not exists`;\r\n            return new Error(msg);\r\n        }\r\n    }\r\n    exports.Errors = Errors;\r\n});\r\n","define([\"require\", \"exports\", \"maishu-chitu-service\", \"./Errors\", \"./Application\"], function (require, exports, maishu_chitu_service_1, Errors_1, Application_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class Page {\r\n        constructor(params) {\r\n            this.data = {};\r\n            this.showing = maishu_chitu_service_1.Callbacks();\r\n            this.shown = maishu_chitu_service_1.Callbacks();\r\n            this.hiding = maishu_chitu_service_1.Callbacks();\r\n            this.hidden = maishu_chitu_service_1.Callbacks();\r\n            this.closing = maishu_chitu_service_1.Callbacks();\r\n            this.closed = maishu_chitu_service_1.Callbacks();\r\n            this.messageReceived = maishu_chitu_service_1.Callbacks();\r\n            this._element = params.element;\r\n            this._app = params.app;\r\n            this._displayer = params.displayer;\r\n            let routeData = Application_1.parseUrl(params.url);\r\n            this.data = Object.assign(routeData.values, params.data || {});\r\n            this._name = routeData.pageName;\r\n            this._url = params.url;\r\n            this._container = params.container;\r\n        }\r\n        on_showing() {\r\n            return this.showing.fire(this, this.data);\r\n        }\r\n        on_shown() {\r\n            return this.shown.fire(this, this.data);\r\n        }\r\n        on_hiding() {\r\n            return this.hiding.fire(this, this.data);\r\n        }\r\n        on_hidden() {\r\n            return this.hidden.fire(this, this.data);\r\n        }\r\n        on_closing() {\r\n            return this.closing.fire(this, this.data);\r\n        }\r\n        on_closed() {\r\n            return this.closed.fire(this, this.data);\r\n        }\r\n        show() {\r\n            this.on_showing();\r\n            let currentPage = this._app.currentPage;\r\n            if (this == currentPage) {\r\n                currentPage = null;\r\n            }\r\n            return this._displayer.show(this, currentPage).then(o => {\r\n                this.on_shown();\r\n            });\r\n        }\r\n        hide(currentPage) {\r\n            this.on_hiding();\r\n            return this._displayer.hide(this, currentPage).then(o => {\r\n                this.on_hidden();\r\n            });\r\n        }\r\n        close() {\r\n            this.on_closing();\r\n            let parentElement = this._element.parentElement;\r\n            if (parentElement == null)\r\n                throw Errors_1.Errors.unexpectedNullValue();\r\n            parentElement.removeChild(this._element);\r\n            this.on_closed();\r\n            return Promise.resolve();\r\n        }\r\n        createService(type) {\r\n            type = type || maishu_chitu_service_1.Service;\r\n            let service = new type();\r\n            service.error.add((sender, error) => {\r\n                this._app.error.fire(this._app, error, this);\r\n            });\r\n            return service;\r\n        }\r\n        reload() {\r\n            this.app.reload(this);\r\n        }\r\n        get element() {\r\n            return this._element;\r\n        }\r\n        get name() {\r\n            return this._name;\r\n        }\r\n        get url() {\r\n            return this._url;\r\n        }\r\n        get app() {\r\n            return this._app;\r\n        }\r\n        get container() {\r\n            return this._container;\r\n        }\r\n    }\r\n    exports.Page = Page;\r\n    class PageDisplayerImplement {\r\n        show(page, previous) {\r\n            page.element.style.display = 'block';\r\n            if (previous != null) {\r\n                previous.element.style.display = 'none';\r\n            }\r\n            return Promise.resolve();\r\n        }\r\n        hide(page, previous) {\r\n            page.element.style.display = 'none';\r\n            if (previous != null) {\r\n                previous.element.style.display = 'block';\r\n            }\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n    exports.PageDisplayerImplement = PageDisplayerImplement;\r\n});\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\ndefine([\"require\", \"exports\", \"maishu-chitu-service\", \"./Page\", \"./Application\", \"./Errors\"], function (require, exports, maishu_chitu_service_1, Page_1, Application_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class PageMaster {\r\n        constructor(containers, parser) {\r\n            this.pageCreated = maishu_chitu_service_1.Callbacks();\r\n            this.pageShowing = maishu_chitu_service_1.Callbacks();\r\n            this.pageShown = maishu_chitu_service_1.Callbacks();\r\n            this.pageType = Page_1.Page;\r\n            this.pageDisplayType = Page_1.PageDisplayerImplement;\r\n            this.cachePages = {};\r\n            this.page_stack = new Array();\r\n            this.nodes = {};\r\n            this.MAX_PAGE_COUNT = 100;\r\n            this.pageTagName = \"div\";\r\n            this.pagePlaceholder = PageMaster.defaultPagePlaceholder;\r\n            this.error = maishu_chitu_service_1.Callbacks();\r\n            this._defaultPageNodeParser = null;\r\n            this.parser = parser || this.defaultPageNodeParser;\r\n            if (!containers)\r\n                throw Errors_1.Errors.argumentNull(\"containers\");\r\n            this.parser.actions = this.parser.actions || {};\r\n            this.containers = containers;\r\n            this.pageContainers = {};\r\n        }\r\n        sendMessage(sender, page, message) {\r\n            let pages;\r\n            if (typeof page == \"string\")\r\n                pages = this.page_stack.filter(o => o.name == page);\r\n            else\r\n                pages = this.page_stack.filter(o => o instanceof page);\r\n            pages.forEach(p => {\r\n                p.messageReceived.fire(sender, message);\r\n            });\r\n        }\r\n        get defaultPageNodeParser() {\r\n            if (this._defaultPageNodeParser == null) {\r\n                let nodes = {};\r\n                this._defaultPageNodeParser = {\r\n                    actions: {},\r\n                    parse: (pageName) => {\r\n                        let node = nodes[pageName];\r\n                        if (node == null) {\r\n                            let path = `modules_${pageName}`.split('_').join('/');\r\n                            node = { action: this.createDefaultAction(path, this.loadjs), name: pageName };\r\n                            nodes[pageName] = node;\r\n                        }\r\n                        return node;\r\n                    }\r\n                };\r\n            }\r\n            return this._defaultPageNodeParser;\r\n        }\r\n        createDefaultAction(url, loadjs) {\r\n            return (page) => __awaiter(this, void 0, void 0, function* () {\r\n                let actionExports = yield loadjs(url);\r\n                if (!actionExports)\r\n                    throw Errors_1.Errors.exportsCanntNull(url);\r\n                let _action = actionExports.default;\r\n                if (_action == null) {\r\n                    throw Errors_1.Errors.canntFindAction(page.name);\r\n                }\r\n                let result;\r\n                if (PageMaster.isClass(_action)) {\r\n                    let action = _action;\r\n                    result = new action(page, this);\r\n                }\r\n                else {\r\n                    let action = _action;\r\n                    result = action(page, this);\r\n                }\r\n                return result;\r\n            });\r\n        }\r\n        loadjs(path) {\r\n            return new Promise((reslove, reject) => {\r\n                requirejs([path], function (result) {\r\n                    reslove(result);\r\n                }, function (err) {\r\n                    reject(err);\r\n                });\r\n            });\r\n        }\r\n        on_pageCreated(page) {\r\n            return this.pageCreated.fire(this, page);\r\n        }\r\n        get currentPage() {\r\n            if (this.page_stack.length > 0)\r\n                return this.page_stack[this.page_stack.length - 1];\r\n            return null;\r\n        }\r\n        cachePageKey(containerName, pageUrl) {\r\n            let key = `${containerName}_${pageUrl}`;\r\n            return key;\r\n        }\r\n        getPage(pageUrl, containerName, values) {\r\n            if (!pageUrl)\r\n                throw Errors_1.Errors.argumentNull('pageUrl');\r\n            let key = this.cachePageKey(containerName, pageUrl);\r\n            values = values || {};\r\n            let cachePage = this.cachePages[key];\r\n            if (cachePage != null) {\r\n                let r = Application_1.parseUrl(pageUrl);\r\n                cachePage.data = Object.assign(values || {}, r.values);\r\n                return { page: cachePage, isNew: false };\r\n            }\r\n            let page = this.createPage(pageUrl, containerName, values);\r\n            this.cachePages[key] = page;\r\n            this.on_pageCreated(page);\r\n            return { page, isNew: true };\r\n        }\r\n        createPage(pageUrl, containerName, values) {\r\n            if (!pageUrl)\r\n                throw Errors_1.Errors.argumentNull('pageUrl');\r\n            if (!containerName)\r\n                throw Errors_1.Errors.argumentNull('containerName');\r\n            values = values || {};\r\n            let r = Application_1.parseUrl(pageUrl);\r\n            let element = this.createPageElement(r.pageName, containerName);\r\n            let displayer = new this.pageDisplayType(this);\r\n            let container = this.containers[containerName];\r\n            if (!container)\r\n                throw Errors_1.Errors.containerIsNotExists(containerName);\r\n            console.assert(this.pageType != null);\r\n            let page = new this.pageType({\r\n                app: this,\r\n                url: pageUrl,\r\n                data: values,\r\n                displayer,\r\n                element,\r\n                container: { name: containerName, element: container },\r\n            });\r\n            let showing = (sender) => {\r\n                for (let key in this.containers) {\r\n                    if (key == sender.container.name) {\r\n                        sender.container.element.style.removeProperty('display');\r\n                    }\r\n                    else {\r\n                        this.containers[key].style.display = 'none';\r\n                    }\r\n                }\r\n                this.pageShowing.fire(this, sender);\r\n            };\r\n            let shown = (sender) => {\r\n                this.pageShown.fire(this, sender);\r\n            };\r\n            page.showing.add(showing);\r\n            page.shown.add(shown);\r\n            page.closed.add(() => {\r\n                page.showing.remove(showing);\r\n                page.shown.remove(shown);\r\n                let key = this.cachePageKey(page.container.name, page.url);\r\n                delete this.cachePages[key];\r\n                this.page_stack = this.page_stack.filter(o => o != page);\r\n            });\r\n            return page;\r\n        }\r\n        createPageElement(pageName, containerName) {\r\n            if (!containerName)\r\n                throw Errors_1.Errors.argumentNull('containerName');\r\n            let container = this.containers[containerName];\r\n            if (!container)\r\n                throw Errors_1.Errors.containerIsNotExists(containerName);\r\n            let placeholder = container.querySelector(`.${this.pagePlaceholder}`);\r\n            if (placeholder == null)\r\n                placeholder = container;\r\n            let element = document.createElement(this.pageTagName);\r\n            placeholder.appendChild(element);\r\n            return element;\r\n        }\r\n        showPage(pageUrl, args, forceRender) {\r\n            args = args || {};\r\n            forceRender = forceRender == null ? false : true;\r\n            let values = {};\r\n            let funs = {};\r\n            for (let key in args) {\r\n                let arg = args[key];\r\n                if (typeof arg == 'function') {\r\n                    funs[key] = arg;\r\n                }\r\n                else {\r\n                    values[key] = arg;\r\n                }\r\n            }\r\n            let r = Application_1.parseUrl(pageUrl);\r\n            values = Object.assign(values, r.values);\r\n            pageUrl = Application_1.createPageUrl(r.pageName, values);\r\n            if (!pageUrl)\r\n                throw Errors_1.Errors.argumentNull('pageName');\r\n            if (this.currentPage != null && this.currentPage.url == pageUrl)\r\n                return this.currentPage;\r\n            let containerName = values.container || this.pageContainers[r.pageName] || Application_1.Application.DefaultContainerName;\r\n            let { page, isNew } = this.getPage(pageUrl, containerName, args);\r\n            if (isNew || forceRender) {\r\n                let action = this.findPageAction(pageUrl);\r\n                if (action == null)\r\n                    throw Errors_1.Errors.actionCanntNull(pageUrl);\r\n                action(page, this);\r\n            }\r\n            page.show();\r\n            this.pushPage(page);\r\n            console.assert(page == this.currentPage, \"page is not current page\");\r\n            return page;\r\n        }\r\n        reload(page) {\r\n            let action = this.findPageAction(page.url);\r\n            console.assert(action != null);\r\n            action(page, this);\r\n        }\r\n        pushPage(page) {\r\n            this.page_stack.push(page);\r\n            if (this.page_stack.length > this.MAX_PAGE_COUNT) {\r\n                let page = this.page_stack.shift();\r\n                if (page) {\r\n                    page.close();\r\n                }\r\n            }\r\n        }\r\n        findPageAction(pageUrl) {\r\n            let routeData = Application_1.parseUrl(pageUrl);\r\n            let pageName = routeData.pageName;\r\n            let node = this.findPageNode(pageName);\r\n            if (node == null)\r\n                throw Errors_1.Errors.pageNodeNotExists(pageName);\r\n            let action = node.action;\r\n            if (action == null)\r\n                throw Errors_1.Errors.actionCanntNull(pageName);\r\n            return node.action;\r\n        }\r\n        findPageNode(pageName) {\r\n            if (this.nodes[pageName])\r\n                return this.nodes[pageName];\r\n            let node = null;\r\n            let action = this.parser.actions ? this.parser.actions[pageName] : null;\r\n            if (action != null) {\r\n                node = { action, name: pageName };\r\n            }\r\n            if (node == null && this.parser.parse != null) {\r\n                node = this.parser.parse(pageName, this);\r\n                console.assert(node.action != null);\r\n            }\r\n            if (node != null)\r\n                this.nodes[pageName] = node;\r\n            return node;\r\n        }\r\n        closeCurrentPage(passData) {\r\n            var page = this.page_stack.pop();\r\n            if (page == null)\r\n                return;\r\n            page.close();\r\n            if (this.currentPage) {\r\n                if (passData) {\r\n                    console.assert(this.currentPage.data != null);\r\n                    this.currentPage.data = Object.assign(this.currentPage.data, passData);\r\n                }\r\n                this.currentPage.show();\r\n            }\r\n        }\r\n        get pageStack() {\r\n            return this.page_stack;\r\n        }\r\n    }\r\n    exports.PageMaster = PageMaster;\r\n    PageMaster.defaultPagePlaceholder = \"page-placeholder\";\r\n    PageMaster.isClass = (function () {\r\n        var toString = Function.prototype.toString;\r\n        function fnBody(fn) {\r\n            return toString.call(fn).replace(/^[^{]*{\\s*/, '').replace(/\\s*}[^}]*$/, '');\r\n        }\r\n        function isClass(fn) {\r\n            return (typeof fn === 'function' &&\r\n                (/^class(\\s|\\{\\}$)/.test(toString.call(fn)) ||\r\n                    (/^.*classCallCheck\\(/.test(fnBody(fn)))));\r\n        }\r\n        return isClass;\r\n    })();\r\n});\r\n","define([\"require\", \"exports\", \"./Application\", \"./PageMaster\", \"./Page\", \"maishu-chitu-service\"], function (require, exports, Application_1, PageMaster_1, Page_1, maishu_chitu_service_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Application = Application_1.Application;\r\n    exports.parseUrl = Application_1.parseUrl;\r\n    exports.createPageUrl = Application_1.createPageUrl;\r\n    exports.PageMaster = PageMaster_1.PageMaster;\r\n    exports.Page = Page_1.Page;\r\n    exports.Callback = maishu_chitu_service_1.Callback;\r\n    exports.Callbacks = maishu_chitu_service_1.Callbacks;\r\n    exports.ValueStore = maishu_chitu_service_1.ValueStore;\r\n    exports.Service = maishu_chitu_service_1.Service;\r\n});\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE_maishu_chitu_service__;"],"sourceRoot":""}