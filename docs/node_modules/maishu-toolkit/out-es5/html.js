"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HTML = void 0;

var _errors = require("./errors");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HTML =
/*#__PURE__*/
function () {
  function HTML() {
    _classCallCheck(this, HTML);
  }

  _createClass(HTML, null, [{
    key: "addClassName",
    value: function addClassName(element, addonClassName) {
      if (element == null) throw _errors.errors.argumentNull('element');
      if (!addonClassName) throw _errors.errors.argumentNull('addonClassName');
      var sourceClassName;
      if (typeof element == 'string') sourceClassName = element;else sourceClassName = element.className;
      sourceClassName = sourceClassName || '';
      console.assert(addonClassName != null);
      if (sourceClassName.indexOf(addonClassName) >= 0) return sourceClassName;
      var className = "".concat(sourceClassName, " ").concat(addonClassName);
      if (typeof element != 'string') element.className = className;
      return className;
    }
  }, {
    key: "removeClassName",
    value: function removeClassName(element, targetClassName) {
      var sourceClassName;
      if (typeof element == 'string') sourceClassName = element;else sourceClassName = element.className || '';
      if (sourceClassName.indexOf(targetClassName) < 0) return sourceClassName;
      sourceClassName = sourceClassName || '';
      sourceClassName = sourceClassName.replace(new RegExp(targetClassName, 'g'), '');
      sourceClassName = sourceClassName.trim();
      if (typeof element != 'string') element.className = sourceClassName;
      return sourceClassName;
    }
  }]);

  return HTML;
}();

exports.HTML = HTML;
//# sourceMappingURL=html.js.map
