"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errors = exports.Errors = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Errors =
/*#__PURE__*/
function () {
  function Errors() {
    _classCallCheck(this, Errors);
  }

  _createClass(Errors, [{
    key: "argumentNull",
    value: function argumentNull(argumentName) {
      var error = new Error("Argument ".concat(argumentName, " cannt be null or emtpy."));
      var name = "argumentNull";
      error.name = name;
      return error;
    }
  }, {
    key: "routeDataFieldNull",
    value: function routeDataFieldNull(fieldName) {
      var msg = "The ".concat(fieldName, " field of route data cannt be null.");
      var error = new Error(msg);
      var name = "routeDataFieldNull";
      error.name = name;
      return error;
    }
  }, {
    key: "argumentFieldNull",
    value: function argumentFieldNull(fieldName, argumentName) {
      var msg = "The ".concat(fieldName, " field of ").concat(argumentName, " cannt be null.");
      var error = new Error(msg);
      var name = "argumentFieldNull";
      error.name = name;
      return error;
    }
  }, {
    key: "argumentTypeIncorrect",
    value: function argumentTypeIncorrect(argumentName, expectedType) {
      var msg = "Argument ".concat(argumentName, " type error, expected type is ").concat(expectedType, ".");
      var error = new Error(msg);
      var name = "argumentTypeIncorrect";
      error.name = name;
      return error;
    }
  }]);

  return Errors;
}();

exports.Errors = Errors;
var errors = new Errors();
exports.errors = errors;
//# sourceMappingURL=errors.js.map
