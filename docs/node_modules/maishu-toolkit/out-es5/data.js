"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataSourceSelectArguments = exports.DataSource = void 0;

var _errors = require("./errors");

var _callback = require("./callback");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var errors = Object.assign(_errors.errors, {
  dataSourceCanntInsert: function dataSourceCanntInsert() {
    return new Error("DataSource can not insert.");
  },
  dataSourceCanntDelete: function dataSourceCanntDelete() {
    return new Error("DataSource can not delete.");
  },
  dataSourceCanntUpdate: function dataSourceCanntUpdate() {
    return new Error("DataSource can not update.");
  },
  primaryKeyNull: function primaryKeyNull(key) {
    var msg = "Primary key named '".concat(key, "' value is null.");
    return new Error(msg);
  },
  queryResultTypeError: function queryResultTypeError() {
    var msg = "Query result type error.";
    return new Error(msg);
  }
});

var DataSource =
/*#__PURE__*/
function () {
  function DataSource(args) {
    _classCallCheck(this, DataSource);

    this.inserting = new _callback.Callback(); //callbacks1<DataSource<T>, T, number>();

    this.inserted = new _callback.Callback();
    this.deleting = new _callback.Callback(); //callbacks<DataSource<T>, T>();

    this.deleted = new _callback.Callback(); //callbacks<DataSource<T>, T>();

    this.updating = new _callback.Callback();
    this.updated = new _callback.Callback();
    this.selecting = new _callback.Callback();
    this.selected = new _callback.Callback(); //callbacks<DataSource<T>, DataSourceSelectResult<T>>();

    this.error = new _callback.Callback(); //callbacks<this, DataSourceError>();

    this.args = args;
    this.primaryKeys = args.primaryKeys || [];
  }

  _createClass(DataSource, [{
    key: "executeInsert",
    value: function executeInsert(item, args) {
      return this.args.insert(item, args);
    }
  }, {
    key: "executeDelete",
    value: function executeDelete(item, args) {
      return this.args.delete(item, args);
    }
  }, {
    key: "executeUpdate",
    value: function executeUpdate(item, args) {
      return this.args.update(item, args);
    }
  }, {
    key: "executeSelect",
    value: function executeSelect(args) {
      args = args || {};
      return this.args.select(args);
    }
  }, {
    key: "insert",
    value: function insert(item, args, index) {
      var _this = this;

      if (!this.canInsert) throw errors.dataSourceCanntInsert();
      if (!item) throw errors.argumentNull("item");

      if (typeof args == 'number') {
        index = args;
        args = null;
      }

      this.inserting.fire({
        sender: this,
        dataItem: item,
        index: index
      });
      return this.executeInsert(item, args).then(function (data) {
        Object.assign(item, data);

        _this.inserted.fire({
          sender: _this,
          dataItem: item,
          index: index
        });

        return data;
      }).catch(function (exc) {
        _this.processError(exc, 'insert');

        throw exc;
      });
    }
  }, {
    key: "delete",
    value: function _delete(item, args) {
      var _this2 = this;

      if (!this.canDelete) throw errors.dataSourceCanntDelete();
      if (!item) throw errors.argumentNull("item");
      this.checkPrimaryKeys(item);
      this.deleting.fire({
        sender: this,
        dataItem: item
      });
      return this.executeDelete(item, args).then(function (data) {
        _this2.deleted.fire({
          sender: _this2,
          dataItem: item
        });

        return data;
      }).catch(function (exc) {
        _this2.processError(exc, 'delete');

        throw exc;
      });
    }
  }, {
    key: "update",
    value: function update(item, args) {
      var _this3 = this;

      if (!this.canUpdate) throw errors.dataSourceCanntUpdate();
      if (!item) throw errors.argumentNull("item");
      this.checkPrimaryKeys(item);
      this.updating.fire({
        sender: this,
        dataItem: item
      });
      return this.executeUpdate(item, args).then(function (data) {
        Object.assign(item, data);

        _this3.updated.fire({
          sender: _this3,
          dataItem: item
        });

        return data;
      }).catch(function (exc) {
        _this3.processError(exc, 'update');

        throw exc;
      });
    }
  }, {
    key: "isSameItem",
    value: function isSameItem(theItem, otherItem) {
      if (theItem == null) throw errors.argumentNull('theItem');
      if (otherItem == null) throw errors.argumentNull('otherItem');
      if (this.primaryKeys.length == 0) return theItem == otherItem;
      this.checkPrimaryKeys(theItem);
      this.checkPrimaryKeys(otherItem);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.primaryKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pk = _step.value;
          if (theItem[pk] != otherItem[pk]) return false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: "checkPrimaryKeys",
    value: function checkPrimaryKeys(item) {
      for (var key in item) {
        if (item[key] == null && this.primaryKeys.indexOf(key) >= 0) throw errors.primaryKeyNull(key);
      }
    }
  }, {
    key: "select",
    value: function select(args) {
      var _this4 = this;

      args = args || {}; // fireCallback(this.selecting, this, args);

      this.selecting.fire({
        sender: this,
        selectArguments: args
      });
      return this.executeSelect(args).then(function (data) {
        var dataItems;
        var totalRowCount;

        if (Array.isArray(data)) {
          dataItems = data;
          totalRowCount = data.length;
        } else if (data.dataItems !== undefined && data.totalRowCount !== undefined) {
          dataItems = data.dataItems;
          totalRowCount = data.totalRowCount;
        } else {
          throw errors.queryResultTypeError();
        }

        _this4.selected.fire({
          sender: _this4,
          selectResult: {
            totalRowCount: totalRowCount,
            dataItems: dataItems
          },
          selectArguments: args
        });

        return {
          totalRowCount: totalRowCount,
          dataItems: dataItems
        };
      }).catch(function (exc) {
        _this4.processError(exc, 'select');

        throw exc;
      });
    }
  }, {
    key: "processError",
    value: function processError(exc, method) {
      exc.method = method;
      this.error.fire({
        sender: this,
        error: exc
      });
      if (!exc.handled) throw exc;
    }
  }, {
    key: "canDelete",
    //callbacks<DataSource<T>, DataSourceSelectArguments>();
    get: function get() {
      return this.args.delete != null && this.primaryKeys.length > 0;
    }
  }, {
    key: "canInsert",
    get: function get() {
      return this.args.insert != null && this.primaryKeys.length > 0;
    }
  }, {
    key: "canUpdate",
    get: function get() {
      return this.args.update != null && this.primaryKeys.length > 0;
    }
  }]);

  return DataSource;
}();

exports.DataSource = DataSource;

var DataSourceSelectArguments = function DataSourceSelectArguments() {
  _classCallCheck(this, DataSourceSelectArguments);

  this.startRowIndex = 0;
  this.maximumRows = 2147483647;
};

exports.DataSourceSelectArguments = DataSourceSelectArguments;
//# sourceMappingURL=data.js.map
